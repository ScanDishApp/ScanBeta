{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neuye\\\\Desktop\\\\scan\\\\ScanBeta\\\\src\\\\screens\\\\ScanScreen.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploader = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const handleImageUpload = event => {\n    const image = event.target.files[0];\n    setSelectedImage(URL.createObjectURL(image));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: selectedImage,\n      alt: \"Selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(TextRecognition, {\n      selectedImage: selectedImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"gNHFCSJ3h3sH8HFrpxN7hUqoxHs=\");\n_c = ImageUploader;\nconst TextRecognition = ({\n  selectedImage\n}) => {\n  _s2();\n  const [recognizedText, setRecognizedText] = useState('');\n  useEffect(() => {\n    const recognizeText = async () => {\n      if (selectedImage) {\n        const result = await Tesseract.recognize(selectedImage);\n        setRecognizedText(result.data.text);\n      }\n    };\n    recognizeText();\n  }, [selectedImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recognized Text:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: recognizedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s2(TextRecognition, \"30YS9J9gQW6yzyfjZgrxMKBD7GQ=\");\n_c2 = TextRecognition;\nexport default ImageUploader;\nvar _c, _c2;\n$RefreshReg$(_c, \"ImageUploader\");\n$RefreshReg$(_c2, \"TextRecognition\");","map":{"version":3,"names":["React","useEffect","useState","Tesseract","jsxDEV","_jsxDEV","ImageUploader","_s","selectedImage","setSelectedImage","handleImageUpload","event","image","target","files","URL","createObjectURL","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","TextRecognition","_c","_s2","recognizedText","setRecognizedText","recognizeText","result","recognize","data","text","_c2","$RefreshReg$"],"sources":["C:/Users/Neuye/Desktop/scan/ScanBeta/src/screens/ScanScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nconst ImageUploader = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  const handleImageUpload = (event) => {\r\n    const image = event.target.files[0];\r\n    setSelectedImage(URL.createObjectURL(image));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n      {selectedImage && <img src={selectedImage} alt=\"Selected\" />}\r\n      {selectedImage && <TextRecognition selectedImage={selectedImage} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TextRecognition = ({ selectedImage }) => {\r\n  const [recognizedText, setRecognizedText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const recognizeText = async () => {\r\n      if (selectedImage) {\r\n        const result = await Tesseract.recognize(selectedImage);\r\n        setRecognizedText(result.data.text);\r\n      }\r\n    };\r\n    recognizeText();\r\n  }, [selectedImage]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Recognized Text:</h2>\r\n      <p>{recognizedText}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMQ,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACnCL,gBAAgB,CAACM,GAAG,CAACC,eAAe,CAACJ,KAAK,CAAC,CAAC;EAC9C,CAAC;EAED,oBACEP,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAOa,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAEV;IAAkB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClEhB,aAAa,iBAAIH,OAAA;MAAKoB,GAAG,EAAEjB,aAAc;MAACkB,GAAG,EAAC;IAAU;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3DhB,aAAa,iBAAIH,OAAA,CAACsB,eAAe;MAACnB,aAAa,EAAEA;IAAc;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEV,CAAC;AAACjB,EAAA,CAfID,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAiBnB,MAAMqB,eAAe,GAAGA,CAAC;EAAEnB;AAAc,CAAC,KAAK;EAAAqB,GAAA;EAC7C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAM+B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAIxB,aAAa,EAAE;QACjB,MAAMyB,MAAM,GAAG,MAAM9B,SAAS,CAAC+B,SAAS,CAAC1B,aAAa,CAAC;QACvDuB,iBAAiB,CAACE,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC;MACrC;IACF,CAAC;IACDJ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACxB,aAAa,CAAC,CAAC;EAEnB,oBACEH,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBnB,OAAA;MAAAY,QAAA,EAAIa;IAAc;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACK,GAAA,CAnBIF,eAAe;AAAAU,GAAA,GAAfV,eAAe;AAqBrB,eAAerB,aAAa;AAAC,IAAAsB,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}