{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neuye\\\\Desktop\\\\scan\\\\ScanBeta\\\\src\\\\screens\\\\ScanScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './ScreenStyle/.css'; // Import the external CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Scan = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [recognizedText, setRecognizedText] = useState('');\n  const handleImageUpload = event => {\n    const image = event.target.files[0];\n    setSelectedImage(URL.createObjectURL(image));\n  };\n  const recognizeText = async () => {\n    if (selectedImage) {\n      const result = await Tesseract.recognize(selectedImage);\n      setRecognizedText(result.data.text);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScanScreen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedImage,\n        alt: \"Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 27\n      }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Recognized Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: recognizedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rectangle-grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rectangle\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u2699\\uFE0F Scan...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(Scan, \"bh7bzdIaRG8cpoaxtmtEzsM6OSs=\");\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["React","useState","Tesseract","jsxDEV","_jsxDEV","Scan","_s","selectedImage","setSelectedImage","recognizedText","setRecognizedText","handleImageUpload","event","image","target","files","URL","createObjectURL","recognizeText","result","recognize","data","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Neuye/Desktop/scan/ScanBeta/src/screens/ScanScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\nimport './ScreenStyle/.css'; // Import the external CSS file\r\n\r\nconst Scan = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [recognizedText, setRecognizedText] = useState('');\r\n\r\n  const handleImageUpload = (event) => {\r\n    const image = event.target.files[0];\r\n    setSelectedImage(URL.createObjectURL(image));\r\n  };\r\n\r\n  const recognizeText = async () => {\r\n    if (selectedImage) {\r\n      const result = await Tesseract.recognize(selectedImage);\r\n      setRecognizedText(result.data.text);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-container\">\r\n      <h1>ScanScreen</h1>\r\n\r\n      <div>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n        {selectedImage && <img src={selectedImage} alt=\"Selected\" />}\r\n        {selectedImage && (\r\n          <div>\r\n            <h2>Recognized Text:</h2>\r\n            <p>{recognizedText}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"rectangle-grid\">\r\n        <div className=\"rectangle\">\r\n          <h2>⚙️ Scan...</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scan;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAO,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMU,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACnCP,gBAAgB,CAACQ,GAAG,CAACC,eAAe,CAACJ,KAAK,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIX,aAAa,EAAE;MACjB,MAAMY,MAAM,GAAG,MAAMjB,SAAS,CAACkB,SAAS,CAACb,aAAa,CAAC;MACvDG,iBAAiB,CAACS,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC;IACrC;EACF,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BpB,OAAA;MAAAoB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEnBxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAOyB,IAAI,EAAC,MAAM;QAACC,MAAM,EAAC,SAAS;QAACC,QAAQ,EAAEpB;MAAkB;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAClErB,aAAa,iBAAIH,OAAA;QAAK4B,GAAG,EAAEzB,aAAc;QAAC0B,GAAG,EAAC;MAAU;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC3DrB,aAAa,iBACZH,OAAA;QAAAoB,QAAA,gBACEpB,OAAA;UAAAoB,QAAA,EAAI;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBxB,OAAA;UAAAoB,QAAA,EAAIf;QAAc;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENxB,OAAA;MAAKmB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7BpB,OAAA;QAAKmB,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBpB,OAAA;UAAAoB,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CAtCID,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAwCV,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}